package reserve_event_rules

import com.ftn.sbnz.model.event.EventEntity;
import com.ftn.sbnz.model.event.EventPurchaseEntity;
import com.ftn.sbnz.model.event.EventPurchaseStatus;
import com.ftn.sbnz.model.event.EventType;

import java.time.LocalDateTime;
import com.ftn.sbnz.model.core.visitor.VisitorEntity;
import com.ftn.sbnz.model.drools_helper.WeatherBroadcast;
import com.ftn.sbnz.model.drools_helper.PrecipitationType;
import java.util.UUID;

rule "create padding purchase"
    when
        $visitor : VisitorEntity()
        $event : EventEntity()
        $purchase: EventPurchaseEntity(visitor == $visitor && event == $event, purchasePrice <= $visitor.getMoney() && status == EventPurchaseStatus.NOT_ENABLED)
    then
        $purchase.setStatus(EventPurchaseStatus.UNPAID);
end

rule "apply discount"
    salience 2
    when
        $purchase : EventPurchaseEntity(status == EventPurchaseStatus.UNPAID && event.startDateTime.isBefore(LocalDateTime.now().plusDays(3)) && event.numberOfAvailableSeats > event.totalSeats / 2)
    then
        System.out.println("APPLY DISCOUNT");
        $purchase.setPurchasePrice($purchase.getPurchasePrice() * 0.5);
end

rule "reserve event"
    salience 1
    when
        $purchase : EventPurchaseEntity(status == EventPurchaseStatus.UNPAID)
    then
        System.out.println("RESERVE EVENT");
        $purchase.setStatus(EventPurchaseStatus.PAID);
        EventEntity event = $purchase.getEvent();
        event.setNumberOfAvailableSeats(event.getNumberOfAvailableSeats() - 1);
        event.getVisitors().add($purchase.getVisitor());
        VisitorEntity visitor = $purchase.getVisitor();
        visitor.setMoney(visitor.getMoney() - $purchase.getPurchasePrice());
end
