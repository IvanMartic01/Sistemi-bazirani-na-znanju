package cep_rules;

import java.time.LocalDateTime;
import java.util.List;

import com.ftn.sbnz.model.core.visitor.VisitorEntity;
import com.ftn.sbnz.model.core.OrganizerEntity;
import com.ftn.sbnz.model.event.EventEntity;
import com.ftn.sbnz.model.event.EventPurchaseEntity;
import com.ftn.sbnz.model.event.EventPurchaseStatus;
import com.ftn.sbnz.model.event.EventAlterationLogEntity;
import com.ftn.sbnz.model.event.EventType;
import java.util.Collection;

global LocalDateTime now;
global Collection<EventEntity> eventsToDelete;
global Collection<EventPurchaseEntity> purchasesToDelete;
global Collection<EventEntity> eventsToPromote;

rule "Cancel event"
when
    // Uslov 1: Dogadjaj još nije poceo
    $event : EventEntity(startDateTime.isAfter(now))

    // Uslov 2: Kupljeno više od 50% karata u poslednjih 1h i broj posetilaca je manji od 2000
    $totalPurchased: Number() from accumulate(
        $purchase: EventPurchaseEntity(event.id == $event.id),
        count($purchase)
    )
    $lastHourPurchase: Number() from accumulate(
        $purchase: EventPurchaseEntity(event.id == $event.id)
        over window:time(1h),
        count($purchase)
    )

    // Uslov 3: Otkazano vise od 20% karata
    $totalCancelled : Number() from accumulate(
        $cancelledPurchase: EventPurchaseEntity(event.id == $event.id, status == EventPurchaseStatus.CANCELLED),
        count($cancelledPurchase)
    )

    // Uslov 4: Izmenjen event 5 puta u poslednja 3 dana
    $modificationCount : Number() from accumulate(
        $alteration: EventAlterationLogEntity(event.id == $event.id)
        over window:time(3d),
        count($alteration)
    )

    eval(($totalPurchased.doubleValue() * 0.5 < $lastHourPurchase.doubleValue() && $totalPurchased.doubleValue() < 2000)
        || $totalCancelled.doubleValue() > $totalPurchased.doubleValue() * 0.2
        || $modificationCount.intValue() >= 5)
then
    System.out.println("\n\n\n\n\n\n\n\n\n\n\n");
    System.out.println("Total purchased %s".formatted($totalPurchased));
    System.out.println("Last hour purchased %s".formatted($lastHourPurchase));
    System.out.println("Event to delete: %s".formatted($event.getName()));
    System.out.println("\n\n\n\n\n\n\n\n\n\n\n");
    eventsToDelete.add($event);
end

rule "Promote event via email"
when
    // Uslov 3: Dogadjaj zahtijeva promociju
    $event : EventEntity(type in (EventType.WINTER_FESTIVAL, EventType.CONCERT, EventType.MULTIPLE_GENRE_CONCERT), startDateTime.isBefore(now))
    $totalPurchased: Number() from accumulate(
        $purchase: EventPurchaseEntity(event.id == $event.id),
        count($purchase)
    )

    // Uslov 1: Broj karata prodatih u zadnjih sat vremena je 70% ili vise
    $lastHourPurchase: Number() from accumulate(
        $purchase: EventPurchaseEntity(event.id == $event.id)
        over window:time(1h),
        count($purchase)
    )

    // Uslov 2: Broj otkazanih karata je manji od 10%
    $totalCancelled : Number() from accumulate(
        $purchase: EventPurchaseEntity(event.id == $event.id, status == EventPurchaseStatus.CANCELLED),
        count($purchase)
    )
    eval($lastHourPurchase.doubleValue() > $totalPurchased.doubleValue() * 0.7
        && $totalCancelled.doubleValue() < $totalPurchased.doubleValue() * 0.1)
then
    eventsToPromote.add($event);
end

rule "Promote event with high attendance"
when
    $event: EventEntity(
        getVisitors().size() > 100,
        endDateTime.isAfter(now.minusDays(7)),
        endDateTime.isBefore(now),
        endDateTime.getHour() >= 18,
        endDateTime.getHour() <= 22
    )
    $avgVisitorCount: Number() from accumulate(
        $event2: EventEntity(
            type == $event.type,
            endDateTime.isAfter(now.minusDays(30)),
            endDateTime.isBefore(now)
        ),
        average($event2.getVisitors().size())
    )
then
    eventsToPromote.add($event);
end
